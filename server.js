const express = require("express");
const cors = require("cors");
const dotenv = require("dotenv");
const OpenAI = require("openai");
const fetch = require("node-fetch"); // –í–ê–ñ–ù–û: node-fetch@2

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());

if (!process.env.OPENAI_API_KEY) {
  console.error("‚ùå –û—à–∏–±–∫–∞: OPENAI_API_KEY –Ω–µ –∑–∞–¥–∞–Ω");
  process.exit(1);
}

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// –ü—Ä–æ—Å—Ç–∞—è in-memory —Å–µ—Å—Å–∏—è (–ª—É—á—à–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ Redis/–ë–î –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö)
const sessions = new Map();

// ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º system prompt –∏–∑ Google Docs
async function loadPromptFromGoogleDoc() {
  try {
    const url =
      "https://docs.google.com/document/d/e/2PACX-1vSvkiilfUZ4WwEDgN5gIod_Q5Q419x7B_pUGxV8TLuGIEi7_KF-f52ynJz3DWfl4ZvOWS1ryUqj-Tdu/pub";

    const res = await fetch(url);
    const html = await res.text();

    const match = html.match(/<body[^>]*>([\s\S]*?)<\/body>/i);
    if (!match) {
      console.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω <body> –≤ HTML");
      return "";
    }

    const plainText = match[1]
      .replace(/<[^>]+>/g, "") // –£–¥–∞–ª—è–µ–º HTML-—Ç–µ–≥–∏
      .replace(/\s+/g, " ")    // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
      .trim();

    return plainText;
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Google Docs:", err.message);
    return "";
  }
}

app.post("/chat", async (req, res) => {
  const { message, sessionId } = req.body;

  if (!message?.trim() || !sessionId) {
    return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ sessionId" });
  }

  let history = sessions.get(sessionId);
  if (!history) {
    const systemPrompt = await loadPromptFromGoogleDoc();
    console.log("üì• PROMPT:", systemPrompt);

    history = [
      {
        role: "system",
        content:
          systemPrompt ||
          "–¢—ã ‚Äî –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ï—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è prompt, –∏—Å–ø–æ–ª—å–∑—É–π —ç—Ç—É —Ñ—Ä–∞–∑—É."
      }
    ];
    sessions.set(sessionId, history);
  }

  history.push({ role: "user", content: message });

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: history,
      max_tokens: 500,
      temperature: 0.7
    });

    const reply = completion.choices?.[0]?.message?.content || "‚ö†Ô∏è –û—Ç–≤–µ—Ç –æ—Ç GPT –Ω–µ –ø–æ–ª—É—á–µ–Ω";

    history.push({ role: "assistant", content: reply });

    res.json({ reply });
  } catch (err) {
    console.error("OpenAI –æ—à–∏–±–∫–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ GPT", detail: err.message });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`‚úÖ RuWave —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`));
